; strcmp
; Jerred Shepherd
; Outputs which of two given strings has a greater ASCII value
JMP main

; Main parameters
string1: DS 10
string2: DS 10

; Function variables
; Contains the current working index
; And the different between the numbers
strcomp_index: DS 1
strcomp_diff:  DS 1

; Function arguments
; These store the address of the first
; char in the string
strcomp_string1_addr: DS 1
strcomp_string2_addr: DS 1

; These store the value of a single
; character at a given 
strcomp_string1_index_value: DS 1
strcomp_string2_index_value: DS 1

; Integer constants
#0:    DB 0
#1:    DB 1
#null: DC '\n'

strcomp_return:
    ; Return value in accumulator
    PUSH strcomp_diff
    RET

strcomp_loop_end:
    ; Return to start of loop
    JMP 1strcomp_loop_logic_1

strcomp_increment_index:
    ; index = index + 1
    LD  strcomp_index
    ADD #1
    ST  strcomp_index
    JMP strcomp_loop_end

strcomp_compare_values:
    ; diff = string1char - string2char
    LD   strcomp_string1_index_value
    SUB  strcomp_string2_index_value
    ST   strcomp_diff
    JMP  strcomp_increment_index

; Check if string2 is null
strcomp_check_null_string2:
    ; if (string2char = "\n")
    LD  strcomp_string2_index_value
    LD  #null
    JE  strcomp_return
    ; else
    JMP strcomp_compare_values

; Check if string1 is null
strcomp_check_null_string1:
    ; if (string1char = "\n")
    LD  strcomp_string1_index_value
    LD  #null
    JE  strcomp_check_null_string2
    ; else
    JMP strcomp_compare_values

; Logic of the loop after getting index
; values
strcomp_loop_logic_2:
    JMP strcomp_check_null_string1

; Get the ASCII value from string2
strcomp_check_string2:
    ; string2char = &string2 + index
    LD  strcomp_string1_addr
    ADD strcomp_index
    ST strcomp_string1_index_value
    JMP strcomp_loop_logic_2

; Get the ASCII value from string1
strcomp_check_string1:
    ; string1char = &string1 + index
    LD  strcomp_string1_addr
    ADD strcomp_index
    ST strcomp_string1_index_value

; Start of the loop
1strcomp_loop_logic_1:
    JMP strcomp_check_string1

; int strcmp (char string1[], char string2[])
strcomp:
    ; int diff, index = 0
    LD      #0
    ST      strcomp_diff
    ST      strcomp_index
    ; Get arguments
    LDPARAM 1
    ST      strcomp_string1_addr
    LDI     strcomp_string1_addr
    LDPARAM 2
    ST      strcomp_string2_addr
    LDI     strcomp_string1_addr
    ; Start loop
    JMP     1strcomp_loop_logic_1
    
; Main function
; Input two strings, call strcomp
; Then output the result
main:
    LDA  string1
    CALL inputString
    LDA  string2
    CALL inputString
    PUSH string1
    PUSH string2
    CALL strcomp
    POP
    CALL printInteger
    POP
    POP
    STOP
